name: Checks

on:
  push:
    branches:
      - '**'

    tags-ignore:
      - '**'

  pull_request:
    branches:
      - '**'

    tags-ignore:
      - '**'

jobs:
  # pre-commit Checks
  pre-commit:
    name: Pre Commit Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3

      - name: Run Pre Commit Checks
        uses: pre-commit/action@v3.0.0

  # Codacy Security Scan
  codacy-security-scan:
    needs: [pre-commit]
    name: Codacy Security Scan
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@1.1.0
        with:
          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
          # You can also omit the token and run the tools that support default configurations
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif

  # Run Test Coverage
  test-coverage-aa-stable:
    needs: [ codacy-security-scan ]
    name: Test Coverage (AA Stable, Python ${{ matrix.python-version }}, Django ${{ matrix.django-version }})
    runs-on: ubuntu-latest

    strategy:
      # Set Python and Django version to test for the stable release of AllianceAuth
      matrix:
        # Don't forget to change the Python version for [upload-coverage] as well
        python-version: [ '3.7', '3.8', '3.9', '3.10', '3.11-dev' ]
        # Don't forget to change the Django version for [upload-coverage] as well
        django-version: [ '3.2' ]

    continue-on-error: ${{ matrix.python-version == '3.11-dev' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install redis
        run: sudo apt-get install -y redis-tools redis-server

      - name: Verify that redis is up
        run: redis-cli ping

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Tox and any other packages
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade tox tox-gh-actions

      - name: Run Tox
        # Run tox using the version of Python in `PATH`
        run: tox -v
        env:
          DJANGO: ${{ matrix.django-version }}
          ALLIANCEAUTH: stable

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: coverage-aa-stable-python-${{ matrix.python-version }}-django-${{ matrix.django-version }}
          path: coverage.xml
          if-no-files-found: ignore

  test-coverage-aa-dev:
    needs: [ codacy-security-scan ]
    name: Test Coverage (AA Alpha/Beta, Python ${{ matrix.python-version }}, Django ${{ matrix.django-version }})
    runs-on: ubuntu-latest

    strategy:
      # Set Python and Django version to test for the alpha/beta release of AllianceAuth
      matrix:
        python-version: [ '3.8', '3.9', '3.10', '3.11-dev' ]
        django-version: [ '4.0' ]

    continue-on-error: ${{ matrix.python-version == '3.11-dev' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install redis
        run: sudo apt-get install -y redis-tools redis-server

      - name: Verify that redis is up
        run: redis-cli ping

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Tox and any other packages
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade tox tox-gh-actions

      - name: Run Tox
        # Run tox using the version of Python in `PATH`
        run: tox -v
        env:
          DJANGO: ${{ matrix.django-version }}
          ALLIANCEAUTH: testing

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: coverage-aa-dev-python-${{ matrix.python-version }}-django-${{ matrix.django-version }}
          path: coverage.xml
          if-no-files-found: ignore

  # Coverage upload to Codecov and Codacy
  upload-coverage:
    #    needs: [ test-coverage-aa-stable ]
    needs: [ test-coverage-aa-stable, test-coverage-aa-dev ]
    name: Upload Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -Rrtlh
        working-directory: artifacts

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: artifacts/coverage-aa-stable-python-3.10-django-3.2/coverage.xml # optional
#          flags: unittests # optional
#          name: codecov-umbrella # optional
#          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)

      - name: Upload Coverage to Codacy Coverage Reporter
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: artifacts/coverage-aa-stable-python-3.10-django-3.2/coverage.xml

  # Pypi Build Test
  pypi-build-test:
    #    needs: [ test-coverage-aa-stable ]
    needs: [ test-coverage-aa-stable, test-coverage-aa-dev ]
    name: PyPi Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Minimum supported Python version by AllianceAuth
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install Tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade build
          python -m pip install --upgrade setuptools wheel

      - name: Package Build
        env:
          STACKMANAGER_VERSION: 9999
        run: |
          python -m build
